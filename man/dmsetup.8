.TH DMSETUP 8 "Nov 29 2001" "Linux" "MAINTENTANCE COMMANDS"
.SH NAME
dmsetup \- low level logical volume management
.SH SYNOPSIS
.ad l
.B dmsetup create
.I <device name> <table path>
.br
.B dmsetup remove
.I <device name>
.br
.B dmsetup suspend
.I <device name>
.br
.B dmsetup resume
.I <device name>
.br
.B dmsetup reload
.I <device name> <table path>
.br
.B dmsetup info
.I <device name>
.ad b
.SH DESCRIPTION
dmsetup is used to manage mapped devices using the device-mapper
driver.  Devices are created by loading a table that gives a target
for ranges of sectors in the logical device.

The first argument to dmsetup is a command, after this the mapped
device name (not the full path).
.SH Commands
.RS
.IP \fBcreate
.I <device name> <table path>
.br
Attempts to create a device using the table file given.  If
successful a device will appear as
/dev/device-mapper/<device-name>.  See below for information
on the table file format.
.IP \fBremove
.I <device name>
.br
Removes the device
.IP \fBsuspend
.I <device name>
.br
Suspends a device, there are two parts to this.  Firstly any
io that has already been mapped by the device, but has not yet
completed will be flushed.  Secondly any further io to that
device will be postponed for as long as the device is suspended.
.IP \fBresume
.I <device name>
.br
Un-suspends a device, postponed io now get's re-queued for processing.
.IP \fBreload
.I <device name> <table path>
.br
This command will only work if a device is in the suspended state.
It allows the user to change the mapping table for an existing device.
.IP \fBinfo
.I <device name>
.br
Output's some brief information about the device in the form:
.br
<SUSPENDED|ACTIVE>
.br
<open count>
.br
<major>,<minor>
.br
<target count>
.SH Table format
Each line of the table specifies a single target, and is of the form:
.br
<logical start sector> <num sectors> <target type> <target args...>
.br
At the moment there are 3 simple target types available (though your
system may have more in the form of modules).

.IP \fBlinear
.I <destination device> <start sector>
.br
The traditional linear mapping.

.IP \fBstriped
.I <num stripes> <chunk size> [<destination #n> <start sector >]+
.br
Creates a striped area, 
.br
eg, striped 2 32 /dev/hda1 0 /dev/hdb1 0
    will map the first chunk (16k) as follows:
.br
    LV chunk 1 -> hda1, chunk 1
.br
    LV chunk 2 -> hdb1, chunk 1
.br
    LV chunk 3 -> hda1, chunk 2
.br
    LV chunk 4 -> hdb1, chunk 2
.br
    etc.


.IP \fBio-err
.br
Errors any io that goes to this area.  Useful for testing or
creating devices with holes in them.


.SH Examples


# A table to join two disks together
.br
0 1028160 linear /dev/hda 0
.br
1028160 3903762 linear /dev/hdb 0



# A table to stripe across the two disks, 
.br
# and add the spare space from
.br
# hdb to the back of the volume

0 2056320 striped 2 32 /dev/hda 0 /dev/hdb 0
.br
2056320 2875602 linear /dev/hdb 1028160

.SH AUTHORS
Original version: Joe Thornber (thornber@sistina.com)